substitutions:
  ble_mac_address: !secret ble_mac_address
  tesla_vin: !secret tesla_vin
  charging_amps_max: "32"

ble_client:
  - mac_address: $ble_mac_address
    id: ble_tesla_id

tesla_ble_vehicle:
  ble_client_id: ble_tesla_id
  id: tesla_ble_vehicle_id
  vin: $tesla_vin
  update_interval: 1min # default
  charge_polling_interval: 10s # Poll charge data every 30 seconds while charging
  awake_polling_interval: 5min # Poll charge data every 5 minutes while awake (but not charging)
  is_asleep:
    name: "Asleep"
  is_user_present:
    name: "User presence"
  is_unlocked:
    name: "Doors"
  is_charge_flap_open:
    name: "Charge flap"
  battery_level:
    name: "Battery Level"
  charging_state:
    name: "Charging State"
  charger_power:
    name: "Charger Power"
  charge_rate:
    name: "Charge Rate"
  charging_amps_number:
    name: "Charging amps"
  charge_limit_number:
    name: "Charging limit"

button:
  - platform: template
    id: ble_pair
    name: Pair BLE key
    icon: mdi:key-wireless
    on_press:
      - lambda: id(tesla_ble_vehicle_id)->startPair();
    entity_category: diagnostic

  - platform: template
    name: Wake up
    icon: mdi:sleep-off
    on_press:
      - lambda: id(tesla_ble_vehicle_id)->wakeVehicle();

  - platform: template
    name: Regenerate key
    icon: mdi:key-change
    on_press:
      - lambda: id(tesla_ble_vehicle_id)->regenerateKey();
    entity_category: diagnostic
    disabled_by_default: true

  - platform: template
    name: Force data update
    icon: mdi:database-sync
    on_press:
      - lambda: id(tesla_ble_vehicle_id)->enqueueVCSECInformationRequest(true);
    entity_category: diagnostic

sensor:
  - platform: ble_client
    type: rssi
    ble_client_id: ble_tesla_id
    name: "BLE Signal"
    icon: mdi:bluetooth
    update_interval: 60s
    entity_category: diagnostic

switch:
  - platform: template
    name: "Charger switch"
    id: charger_switch_control
    optimistic: false
    lambda: |-
      // Read the actual charger switch state directly from the component
      return id(tesla_ble_vehicle_id)->getCurrentChargerSwitchState();
    turn_on_action:
      - lambda: id(tesla_ble_vehicle_id)->sendCarServerVehicleActionMessage(SET_CHARGING_SWITCH, 1);
    turn_off_action:
      - lambda: id(tesla_ble_vehicle_id)->sendCarServerVehicleActionMessage(SET_CHARGING_SWITCH, 0);

  - platform: ble_client
    ble_client_id: ble_tesla_id
    name: "BLE Connection"
    entity_category: diagnostic
